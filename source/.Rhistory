pairs(df[,c("log.Memory_Bus","log.Release_Price")], main = "Price and Memory Bus", col = "indianred1")
pairs(df[,c("log.Memory_Speed","log.Release_Price")], main = "Price and Memory Speed", col = "darkorchid")
pairs(df[,c("log.Release_Year","log.Release_Price")], main = "Price and Release Year", col = "deeppink")
pairs(df[,c('log.TMUs',"log.Release_Price")], main = "Price and TMUs", col = "lightgoldenrod3")
pairs(df[,c('log.TMUs',"log.Release_Price")], main = "Price and TMUs", col = "steelblue3")
pairs(df[,c('log.Memory','log.Memory_Bus', 'log.Memory_Speed', 'log.Release_Price')], main = "Pairs plot of Memory and Price", col = "steelblue3")
pairs(df[,c('log.Boost_Clock','log.Core_Speed','log.Max_Power', 'log.Release_Price')], main = "Pairs plot of Speed/Power and Price", col = "steelblue3")
pairs(df[,c('log.Shader','log.TMUs', 'log.Release_Price')], main = "Pairs plot of Rendering Unit and Price", col = "steelblue3")
pairs(df[,c('log.Boost_Clock','log.Core_Speed','log.Max_Power','log.Memory','log.Memory_Bus', 'log.Memory_Speed', 'log.Release_Year', 'log.Release_Price','log.Shader','log.Shader')], main = "Pairs plot of all variables (log)", col = "steelblue3")
# ----------------------------------------------------------------------------------------------------------------------
# One-way ANOVA
aovCore_Speed <- select(df, Manufacturer, log.Core_Speed)
ggqqplot(aovCore_Speed$log.Core_Speed)
ggqqplot(aovCore_Speed$log.Core_Speed, palette = c("#00AFBB", "#E7B800"))
aov_one <- aov(log.Core_Speed ~ Manufacturer, data = aovCore_Speed)
aov_one
summary(aov_one)
leveneTest(log.Core_Speed ~ Manufacturer, aovCore_Speed, center = mean)
oneway.test(log.Core_Speed ~ Manufacturer, data=aovCore_Speed)
# Two-way ANOVA
quantile(df$log.Release_Price, probs = seq(0, 1, 1/3))
# GPU_budget = df[which(df$log.Release_Price >= log(0) & df$log.Release_Price < log(200)),]
# GPU_midrange = df[which(df$log.Release_Price >= log(200) & df$log.Release_Price < log(600)),]
# GPU_highend = df[which(df$log.Release_Price >= log(600) ),]
df$Label <- cut(df$log.Release_Price, c(log(0), log(200), log(600), log(15000)), labels=c("Budget", "Midrange", "Highend"), include.lowest=T)
ftable(df$Manufacturer)
aov_two <- aov(log.Core_Speed ~ Manufacturer + Label, data = df)
aov_two
summary(aov_two)
TukeyHSD(aov_two)
# Chi-squared
HighCoreSpeed <- filter(df, log.Core_Speed > 7)
LowCoreSpeed <- filter(df, log.Core_Speed < 7)
HighCoreSpeed  = c(80,530,8)
LowCoreSpeed  = c(373,2362,12)
chisq.test(data.frame(HighCoreSpeed ,LowCoreSpeed))
# Z-test
df_z = df %>% select('Manufacturer','log.Release_Price')
df_ztest = df_z %>% filter(dfz$Manufacturer == 'Nvidia' | dfz$Manufacturer == 'AMD')
ggqqplot(df_ztest$log.Release_Price)
ggqqplot(df_ztest$log.Release_Price)
# ----------------------------------------------------------------------------------------------------------------------
# Linear regression model
lmPrice = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
summary(lmPrice)
vif(lmPrice)
confint(lmPrice)
lmPriceNoMem = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
summary(lmPriceNoMem)
lmPrice_Mem = lm(log.Release_Price ~ log.Memory, df[, c('log.Release_Price', 'log.Memory')])
anova(lmPrice_Mem)
glance(lmPrice) %>% select(adj.r.squared, sigma, p.value)
sigma(lmPrice)/mean(df$log.Release_Price)
plot(lmPrice$fitted.values, lmPrice$residuals, col = "black", xlab = "Fitted values", ylab = "Residuals")
par(mfrow=c(2,2))
plot(lmPrice, col = "black")
par(mfrow=c(1,1))
par(mfrow=c(1, 2))
termplot(lmPrice)
geom_histogram(bins = 100, fill = 'steelblue', color = 'black') +
labs(title = 'Histogram of Residuals', x = 'Residuals', y = 'Frequency') +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5))
price.graph <-ggplot(df, aes(x = log.Release_Price, y = log.Memory, color = log.Max_Power)) + geom_point() + theme_classic()
price.graph <- price.graph + geom_smooth(method = "lm", col = "red")
price.graph
price_2.graph <-ggplot(df, aes(x = log.Release_Price, y = log.Boost_Clock, color = log.Memory_Speed)) + geom_point() + theme_classic()
price_2.graph <- price_2.graph + geom_smooth(method = "lm", col = "red")
price_2.graph
price_3.graph <-ggplot(df, aes(x = log.Release_Price, y = Core_Speed, color = log.Memory_Bus)) + geom_point() + theme_classic()
price_3.graph <- price_3.graph + geom_smooth(method = "lm", col = "red")
price_3.graph
ggplot(df) + geom_bar(aes(x = Release_Year), stat = "count", fill = rainbow(6)) + scale_x_continuous(breaks = pretty(df$Release_Year, n = 10)) + xlab("Year") + ylab("Number of GPUs")
# ----------------------------------------------------------------------------------------------------------------------
# Testing
predict_Data = data.frame(
log.Boost_Clock = c(mean(df[, 'log.Boost_Clock']), median(df[, 'log.Boost_Clock']), max(df[, 'log.Boost_Clock'])),
log.Core_Speed = c(mean(df[, 'log.Core_Speed']), median(df[, 'log.Core_Speed']), max(df[, 'log.Core_Speed'])),
log.Max_Power = c(mean(df[, 'log.Max_Power']), median(df[, 'log.Max_Power']), max(df[, 'log.Max_Power'])),
log.Memory = c(mean(df[, 'log.Memory']), median(df[, 'log.Memory']), max(df[, 'log.Memory'])),
log.Memory_Bus = c(mean(df[, 'log.Memory_Bus']), median(df[, 'log.Memory_Bus']), max(df[, 'log.Memory_Bus'])),
log.Memory_Speed = c(mean(df[, 'log.Memory_Speed']), median(df[, 'log.Memory_Speed']), max(df[, 'log.Memory_Speed'])),
log.Shader = c(mean(df[, 'log.Shader']), median(df[, 'log.Shader']), max(df[, 'log.Shader'])),
log.TMUs = c(mean(df[, 'log.TMUs']), median(df[, 'log.TMUs']), max(df[, 'log.TMUs']))
)
predict(lmPrice, predict_Data, interval = "confidence", level = 0.95)
exp(predict(lmPrice, predict_Data, interval = "confidence", level = 0.95))
# RTX 3090
spec_RTX_3090 = data.frame(
log.Boost_Clock = log(1695),
log.Core_Speed = log(1395),
log.Max_Power = log(350),
log.Memory = log(24576),
log.Memory_Bus = log(384),
log.Memory_Speed = log(1219),
log.Shader = log(10496),
log.TMUs =  log(328)
)
exp(predict(lmPrice, spec_RTX_3090, interval = "confidence", level = 0.95))
# Re-train model
df = df_drop
df['log.Boost_Clock'] <- log(df['Boost_Clock'])
df['log.Core_Speed'] <- log(df['Core_Speed'])
df['log.Max_Power'] <- log(df['Max_Power'])
df['log.Memory'] <- log(df['Memory'])
df['log.Memory_Bus'] <- log(df['Memory_Bus'])
df['log.Memory_Speed'] <- log(df['Memory_Speed'])
df['log.Release_Year'] <- log(df['Release_Year'])
df['log.Release_Price'] <- log(df['Release_Price'])
df['log.Shader'] <- log(df['Shader'])
df['log.TMUs'] <- log(df['TMUs'])
lmPrice = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
exp(predict(lmPrice, spec_RTX_3090, interval = "confidence", level = 0.95))
# ----------------------------------------------------------------------------------------------------------------------
# Exponential model
df = df_knn
year_arr <- unique(sort(strtoi(df$Release_Year)))
memory_arr_mean = data.frame(df %>% group_by(Release_Year) %>% summarise_at(vars(Memory), list(name = mean)))
memory_arr_mean = array(memory_arr_mean$name)
memory_arr_median = data.frame(df %>% group_by(Release_Year) %>% summarise_at(vars(Memory), list(name = median)))
memory_arr_median = array(memory_arr_median$name)
calculateMooresValue <- function(x, y_trans) {
return(memory_arr_median[1] * 2**((x-y_trans)/2))
}
exponentialCurve <- function(x, a, b, c) {
return(a*2**((x-c)*b))
}
y_pred_moore_law_teoretic = calculateMooresValue(year_arr, year_arr[1])
popt <- c(1.04294249e+01, 3.55525954e-01, 1.99040139e+03)
y_pred_moore_law_fitted = exponentialCurve(year_arr, popt[1], popt[2], popt[3])
plot(x=year_arr, y=log(memory_arr_mean),type = "o",col = "skyblue3", xlab = "Year", ylab = "GPU Memory", main = "GPU Memory and Year of Release (logaritmic scale)")
lines(x=year_arr, y=log(memory_arr_median), type = "o", col = "sienna2")
lines(x=year_arr, y=log(y_pred_moore_law_teoretic), type = "o", col = "slateblue2")
lines(x=year_arr, y=log(y_pred_moore_law_fitted), type = "o", col = "seashell4")
df_extra<-data.frame(Release_Year = year_arr, Memory_Mean = memory_arr_mean, Memory_Median = memory_arr_median, Moore_Teoretic = y_pred_moore_law_teoretic, Moore_Fitted = y_pred_moore_law_fitted)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() + geom_point(size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential graph for GPU Memory and Year of Release (logaritmic scale)") +
geom_line(aes(y = log(Memory_Mean), colour = "Mean"), n=1000) +
geom_line(aes(y = log(Memory_Median), colour = "Median"), n=1000) +
geom_line(aes(y = log(Moore_Teoretic), colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = log(Moore_Fitted), colour = "Moore's law fitted"), n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential graph for GPU Memory and Year of Release (original scale)") +
geom_line(aes(y = Memory_Mean, colour = "Mean"), n=1000) +
geom_line(aes(y = Memory_Median, colour = "Median"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000)
# Polynomial
poly_2_mean <- lm(Memory_Mean ~ Release_Year + I(Release_Year^2), data=df_extra)
summary(poly_2_mean)
coef(poly_2_mean)
year_df <- data.frame(Release_Year = year_arr)
y_pred_lin_reg_2 <- predict(poly_2_mean, year_df, type="response")
df_extra$Y_pred_lin_reg_2 <- y_pred_lin_reg_2
poly_3_mean <- lm(Memory_Mean ~ Release_Year + I(Release_Year^2) + I(Release_Year^3), data=df_extra)
summary(poly_3_mean)
poly_3_mean$coefficients[1:4] <- c(-17128661108.085476, 2.56615577e+07, -1.28150909e+04,  2.13323868e+00)
poly_3_mean$rank <- c(4)
y_pred_lin_reg_3 <- predict(poly_3_mean, year_df, type="response")
df_extra$Y_pred_lin_reg_3 <- y_pred_lin_reg_3
# Old graph
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() + geom_point(size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Polynomial graph for GPU Memory and Year of Release (logaritmic scale)") +
stat_smooth(method = lm, formula = y ~ poly(x, 2, raw = F), se=F, col = 'darkseagreen', n=1000) +
stat_smooth(method = lm, formula = y ~ poly(x, 3, raw = F), se=F, col = 'darkgoldenrod1', n=1000) +
geom_smooth(method = lm, formula = y ~ poly(x,2), aes(y = log(Moore_Teoretic), colour = "Moore's law teoretic"), se=F, n =1000) +
geom_smooth(method = lm, formula = y ~ poly(x,2), aes(y = log(Moore_Fitted), colour = "Moore's law fitted"), se=F, n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("teoreticPolynomial graph for GPU Memory and Year of Release (original scale)") +
geom_line(aes(y = y_pred_lin_reg_2, colour = "2nd degree polynomial"), n=1000) +
geom_line(aes(y = y_pred_lin_reg_3, colour = "3rd degree polynomial"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential model vs Polynomial model") +
geom_line(aes(y = y_pred_lin_reg_2, colour = "2nd degree polynomial"), n=1000) +
geom_line(aes(y = y_pred_lin_reg_3, colour = "3rd degree polynomial"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000) +
geom_line(aes(y = Memory_Mean, colour = "Mean"), n=1000) +
geom_line(aes(y = Memory_Median, colour = "Median"), n=1000)
# ----------------------------------------------------------------------------------------------------------------------
exp(predict(poly_3_mean, spec_RTX_3090, interval = "confidence", level = 0.95))
df = df_knn
year_arr
library(car)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magrittr)
library(stats)
library(VIM)
#install.packages("ggpubr")
# ----------------------------------------------------------------------------------------------------------------------
raw_data = read.csv('data.csv')
View(raw_data)
data = raw_data %>% select('Manufacturer','Name','Architecture','Boost_Clock','Core_Speed','Max_Power','Memory','Memory_Bus', 'Memory_Speed', 'Release_Year', 'Release_Price','Shader','TMUs')
View(data)
summary(data)
df_drop = data %>% filter(!( is.na(Manufacturer) | is.na(Name) | is.na(Architecture) | is.na(Boost_Clock) | is.na(Core_Speed) | is.na(Max_Power) | is.na(Memory) | is.na(Memory_Bus) | is.na(Memory_Speed) | is.na(Release_Year) | is.na(Release_Price) | is.na(Shader) | is.na(TMUs)))
View(df_drop)
summary(df_drop)
df_mean = data %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
View(df_mean)
summary(df_mean)
df_median = data %>% mutate_all(~ifelse(is.na(.x), median(.x, na.rm = TRUE), .x))
View(df_median)
summary(df_median)
df_knn <- kNN(data, k = sqrt(nrow(data)), imp_var = FALSE)
View(df_knn)
summary(df_knn)
df = df_knn
df['log.Boost_Clock'] <- log(df['Boost_Clock'])
df['log.Core_Speed'] <- log(df['Core_Speed'])
df['log.Max_Power'] <- log(df['Max_Power'])
df['log.Memory'] <- log(df['Memory'])
df['log.Memory_Bus'] <- log(df['Memory_Bus'])
df['log.Memory_Speed'] <- log(df['Memory_Speed'])
df['log.Release_Year'] <- log(df['Release_Year'])
df['log.Release_Price'] <- log(df['Release_Price'])
df['log.Shader'] <- log(df['Shader'])
df['log.TMUs'] <- log(df['TMUs'])
View(df)
stats_table = data.frame(
Name = c('mean', 'median', 'sd', 'min', 'max'),
log.Boost_Clock = c(mean(df[, 'log.Boost_Clock']), median(df[, 'log.Boost_Clock']), sd(df[, 'log.Boost_Clock']), min(df[, 'log.Boost_Clock']), max(df[, 'log.Boost_Clock'])),
log.Core_Speed = c(mean(df[, 'log.Core_Speed']), median(df[, 'log.Core_Speed']), sd(df[, 'log.Core_Speed']), min(df[, 'log.Core_Speed']), max(df[, 'log.Core_Speed'])),
log.Max_Power = c(mean(df[, 'log.Max_Power']), median(df[, 'log.Max_Power']), sd(df[, 'log.Max_Power']), min(df[, 'log.Max_Power']), max(df[, 'log.Max_Power'])),
log.Memory = c(mean(df[, 'log.Memory']), median(df[, 'log.Memory']), sd(df[, 'log.Memory']), min(df[, 'log.Memory']), max(df[, 'log.Memory'])),
log.Memory_Bus = c(mean(df[, 'log.Memory_Bus']), median(df[, 'log.Memory_Bus']), sd(df[, 'log.Memory_Bus']), min(df[, 'log.Memory_Bus']), max(df[, 'log.Memory_Bus'])),
log.Memory_Speed = c(mean(df[, 'log.Memory_Speed']), median(df[, 'log.Memory_Speed']), sd(df[, 'log.Memory_Speed']), min(df[, 'log.Memory_Speed']), max(df[, 'log.Memory_Speed'])),
log.Release_Year = c(mean(df[, 'log.Release_Year']), median(df[, 'log.Release_Year']), sd(df[, 'log.Release_Year']), min(df[, 'log.Release_Year']), max(df[, 'log.Release_Year'])),
log.Release_Price = c(mean(df[, 'log.Release_Price']), median(df[, 'log.Release_Price']), sd(df[, 'log.Release_Price']), min(df[, 'log.Release_Price']), max(df[, 'log.Release_Price'])),
log.Shader = c(mean(df[, 'log.Shader']), median(df[, 'log.Shader']), sd(df[, 'log.Shader']), min(df[, 'log.Shader']), max(df[, 'log.Shader'])),
log.TMUs = c(mean(df[, 'log.TMUs']), median(df[, 'log.TMUs']), sd(df[, 'log.TMUs']), min(df[, 'log.TMUs']), max(df[, 'log.TMUs']))
)
View(stats_table)
ftable(df[ ,'Release_Year'])
# ----------------------------------------------------------------------------------------------------------------------
hist(df$Release_Price, main="Histogram of Release_Price", xlab = "US Dollar", ylab = "Number of GPUs", col = rainbow(20), breaks=100)
hist(df$log.Release_Price, main = "Histogram of log.Release_Price", xlab = "log(US Dollar)", ylab = "Number of GPUs", col = rainbow(length(unique(df$log.Release_Price))), breaks=100)
hist(df$Release_Year, main="Histogram of Release_Year", xlab = "Year", ylab = "Number of GPUs", col = rainbow(20), breaks = 20, xlim=c(1998,2017))
lines(density(df$Release_Year))
ggplot(df, aes(x = Release_Year, y=..density..)) + theme_classic() +  geom_density() +
geom_histogram(bins = 50, fill = 'steelblue', color = 'black') +
labs(title = 'Histogram of Release_Year', x = 'Year', y = 'Frequency') +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5))
boxplot(df$log.Release_Price ~ df$log.Shader , main="Boxplot of log.Release_Price and log.Shader", ylab = "log.Release_Price", xlab = "log.Shader", col = rainbow (11))
boxplot(df$log.Memory ~ df$log.Memory_Bus, main = "Boxplot of log.Memory and log.Memory_Bus", ylab = "log.Memory", xlab = "log.Memory_Bus", col = rainbow (17))
boxplot(df$log.Memory_Speed ~ df$log.Memory_Bus, main = "Boxplot of log.Memory_Speed and log.Memory_Bus", ylab = "log.Memory_Speed", xlab = "log.Memory_Bus", col = rainbow (17))
pairs(df[,c("log.Boost_Clock","log.Release_Price")], main = "Price and Boost Clock", col = "lightskyblue")
pairs(df[,c("log.Core_Speed","log.Release_Price")], main = "Price and Core Speed", col = "chartreuse4")
pairs(df[,c("log.Max_Power","log.Release_Price")], main = "Price and Max Power", col = "aquamarine3")
pairs(df[,c("log.Memory","log.Release_Price")], main = "Price and Memory", col = "coral4")
pairs(df[,c("log.Memory_Bus","log.Release_Price")], main = "Price and Memory Bus", col = "indianred1")
pairs(df[,c("log.Memory_Speed","log.Release_Price")], main = "Price and Memory Speed", col = "darkorchid")
pairs(df[,c("log.Release_Year","log.Release_Price")], main = "Price and Release Year", col = "deeppink")
pairs(df[,c('log.TMUs',"log.Release_Price")], main = "Price and TMUs", col = "lightgoldenrod3")
pairs(df[,c('log.TMUs',"log.Release_Price")], main = "Price and TMUs", col = "steelblue3")
pairs(df[,c('log.Memory','log.Memory_Bus', 'log.Memory_Speed', 'log.Release_Price')], main = "Pairs plot of Memory and Price", col = "steelblue3")
pairs(df[,c('log.Boost_Clock','log.Core_Speed','log.Max_Power', 'log.Release_Price')], main = "Pairs plot of Speed/Power and Price", col = "steelblue3")
pairs(df[,c('log.Shader','log.TMUs', 'log.Release_Price')], main = "Pairs plot of Rendering Unit and Price", col = "steelblue3")
pairs(df[,c('log.Boost_Clock','log.Core_Speed','log.Max_Power','log.Memory','log.Memory_Bus', 'log.Memory_Speed', 'log.Release_Year', 'log.Release_Price','log.Shader','log.Shader')], main = "Pairs plot of all variables (log)", col = "steelblue3")
# ----------------------------------------------------------------------------------------------------------------------
# One-way ANOVA
aovCore_Speed <- select(df, Manufacturer, log.Core_Speed)
ggqqplot(aovCore_Speed$log.Core_Speed)
ggqqplot(aovCore_Speed$log.Core_Speed, palette = c("#00AFBB", "#E7B800"))
aov_one <- aov(log.Core_Speed ~ Manufacturer, data = aovCore_Speed)
aov_one
summary(aov_one)
leveneTest(log.Core_Speed ~ Manufacturer, aovCore_Speed, center = mean)
oneway.test(log.Core_Speed ~ Manufacturer, data=aovCore_Speed)
# Two-way ANOVA
quantile(df$log.Release_Price, probs = seq(0, 1, 1/3))
# GPU_budget = df[which(df$log.Release_Price >= log(0) & df$log.Release_Price < log(200)),]
# GPU_midrange = df[which(df$log.Release_Price >= log(200) & df$log.Release_Price < log(600)),]
# GPU_highend = df[which(df$log.Release_Price >= log(600) ),]
df$Label <- cut(df$log.Release_Price, c(log(0), log(200), log(600), log(15000)), labels=c("Budget", "Midrange", "Highend"), include.lowest=T)
ftable(df$Manufacturer)
aov_two <- aov(log.Core_Speed ~ Manufacturer + Label, data = df)
aov_two
summary(aov_two)
TukeyHSD(aov_two)
# Chi-squared
HighCoreSpeed <- filter(df, log.Core_Speed > 7)
LowCoreSpeed <- filter(df, log.Core_Speed < 7)
HighCoreSpeed  = c(80,530,8)
LowCoreSpeed  = c(373,2362,12)
chisq.test(data.frame(HighCoreSpeed ,LowCoreSpeed))
# Z-test
df_z = df %>% select('Manufacturer','log.Release_Price')
df_ztest = df_z %>% filter(dfz$Manufacturer == 'Nvidia' | dfz$Manufacturer == 'AMD')
ggqqplot(df_ztest$log.Release_Price)
# ----------------------------------------------------------------------------------------------------------------------
# Linear regression model
lmPrice = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
summary(lmPrice)
vif(lmPrice)
confint(lmPrice)
lmPriceNoMem = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
summary(lmPriceNoMem)
lmPrice_Mem = lm(log.Release_Price ~ log.Memory, df[, c('log.Release_Price', 'log.Memory')])
anova(lmPrice_Mem)
glance(lmPrice) %>% select(adj.r.squared, sigma, p.value)
sigma(lmPrice)/mean(df$log.Release_Price)
plot(lmPrice$fitted.values, lmPrice$residuals, col = "black", xlab = "Fitted values", ylab = "Residuals")
par(mfrow=c(2,2))
plot(lmPrice, col = "black")
par(mfrow=c(1,1))
par(mfrow=c(1, 2))
termplot(lmPrice)
geom_histogram(bins = 100, fill = 'steelblue', color = 'black') +
labs(title = 'Histogram of Residuals', x = 'Residuals', y = 'Frequency') +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5))
price.graph <-ggplot(df, aes(x = log.Release_Price, y = log.Memory, color = log.Max_Power)) + geom_point() + theme_classic()
price.graph <- price.graph + geom_smooth(method = "lm", col = "red")
price.graph
price_2.graph <-ggplot(df, aes(x = log.Release_Price, y = log.Boost_Clock, color = log.Memory_Speed)) + geom_point() + theme_classic()
price_2.graph <- price_2.graph + geom_smooth(method = "lm", col = "red")
price_2.graph
price_3.graph <-ggplot(df, aes(x = log.Release_Price, y = Core_Speed, color = log.Memory_Bus)) + geom_point() + theme_classic()
price_3.graph <- price_3.graph + geom_smooth(method = "lm", col = "red")
price_3.graph
ggplot(df) + geom_bar(aes(x = Release_Year), stat = "count", fill = rainbow(6)) + scale_x_continuous(breaks = pretty(df$Release_Year, n = 10)) + xlab("Year") + ylab("Number of GPUs")
# ----------------------------------------------------------------------------------------------------------------------
# Testing
predict_Data = data.frame(
log.Boost_Clock = c(mean(df[, 'log.Boost_Clock']), median(df[, 'log.Boost_Clock']), max(df[, 'log.Boost_Clock'])),
log.Core_Speed = c(mean(df[, 'log.Core_Speed']), median(df[, 'log.Core_Speed']), max(df[, 'log.Core_Speed'])),
log.Max_Power = c(mean(df[, 'log.Max_Power']), median(df[, 'log.Max_Power']), max(df[, 'log.Max_Power'])),
log.Memory = c(mean(df[, 'log.Memory']), median(df[, 'log.Memory']), max(df[, 'log.Memory'])),
log.Memory_Bus = c(mean(df[, 'log.Memory_Bus']), median(df[, 'log.Memory_Bus']), max(df[, 'log.Memory_Bus'])),
log.Memory_Speed = c(mean(df[, 'log.Memory_Speed']), median(df[, 'log.Memory_Speed']), max(df[, 'log.Memory_Speed'])),
log.Shader = c(mean(df[, 'log.Shader']), median(df[, 'log.Shader']), max(df[, 'log.Shader'])),
log.TMUs = c(mean(df[, 'log.TMUs']), median(df[, 'log.TMUs']), max(df[, 'log.TMUs']))
)
predict(lmPrice, predict_Data, interval = "confidence", level = 0.95)
exp(predict(lmPrice, predict_Data, interval = "confidence", level = 0.95))
# RTX 3090
spec_RTX_3090 = data.frame(
log.Boost_Clock = log(1695),
log.Core_Speed = log(1395),
log.Max_Power = log(350),
log.Memory = log(24576),
log.Memory_Bus = log(384),
log.Memory_Speed = log(1219),
log.Shader = log(10496),
log.TMUs =  log(328)
)
exp(predict(lmPrice, spec_RTX_3090, interval = "confidence", level = 0.95))
# Re-train model
df = df_drop
df['log.Boost_Clock'] <- log(df['Boost_Clock'])
df['log.Core_Speed'] <- log(df['Core_Speed'])
df['log.Max_Power'] <- log(df['Max_Power'])
df['log.Memory'] <- log(df['Memory'])
df['log.Memory_Bus'] <- log(df['Memory_Bus'])
df['log.Memory_Speed'] <- log(df['Memory_Speed'])
df['log.Release_Year'] <- log(df['Release_Year'])
df['log.Release_Price'] <- log(df['Release_Price'])
df['log.Shader'] <- log(df['Shader'])
df['log.TMUs'] <- log(df['TMUs'])
lmPrice = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
exp(predict(lmPrice, spec_RTX_3090, interval = "confidence", level = 0.95))
# ----------------------------------------------------------------------------------------------------------------------
# Exponential model
df = df_knn
year_arr <- unique(sort(strtoi(df$Release_Year)))
memory_arr_mean = data.frame(df %>% group_by(Release_Year) %>% summarise_at(vars(Memory), list(name = mean)))
memory_arr_mean = array(memory_arr_mean$name)
memory_arr_median = data.frame(df %>% group_by(Release_Year) %>% summarise_at(vars(Memory), list(name = median)))
memory_arr_median = array(memory_arr_median$name)
calculateMooresValue <- function(x, y_trans) {
return(memory_arr_median[1] * 2**((x-y_trans)/2))
}
exponentialCurve <- function(x, a, b, c) {
return(a*2**((x-c)*b))
}
y_pred_moore_law_teoretic = calculateMooresValue(year_arr, year_arr[1])
popt <- c(1.04294249e+01, 3.55525954e-01, 1.99040139e+03)
y_pred_moore_law_fitted = exponentialCurve(year_arr, popt[1], popt[2], popt[3])
plot(x=year_arr, y=log(memory_arr_mean),type = "o",col = "skyblue3", xlab = "Year", ylab = "GPU Memory", main = "GPU Memory and Year of Release (logaritmic scale)")
lines(x=year_arr, y=log(memory_arr_median), type = "o", col = "sienna2")
lines(x=year_arr, y=log(y_pred_moore_law_teoretic), type = "o", col = "slateblue2")
lines(x=year_arr, y=log(y_pred_moore_law_fitted), type = "o", col = "seashell4")
df_extra<-data.frame(Release_Year = year_arr, Memory_Mean = memory_arr_mean, Memory_Median = memory_arr_median, Moore_Teoretic = y_pred_moore_law_teoretic, Moore_Fitted = y_pred_moore_law_fitted)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() + geom_point(size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential graph for GPU Memory and Year of Release (logaritmic scale)") +
geom_line(aes(y = log(Memory_Mean), colour = "Mean"), n=1000) +
geom_line(aes(y = log(Memory_Median), colour = "Median"), n=1000) +
geom_line(aes(y = log(Moore_Teoretic), colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = log(Moore_Fitted), colour = "Moore's law fitted"), n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential graph for GPU Memory and Year of Release (original scale)") +
geom_line(aes(y = Memory_Mean, colour = "Mean"), n=1000) +
geom_line(aes(y = Memory_Median, colour = "Median"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000)
# Polynomial
poly_2_mean <- lm(Memory_Mean ~ Release_Year + I(Release_Year^2), data=df_extra)
summary(poly_2_mean)
coef(poly_2_mean)
year_df <- data.frame(Release_Year = year_arr)
y_pred_lin_reg_2 <- predict(poly_2_mean, year_df, type="response")
df_extra$Y_pred_lin_reg_2 <- y_pred_lin_reg_2
poly_3_mean <- lm(Memory_Mean ~ Release_Year + I(Release_Year^2) + I(Release_Year^3), data=df_extra)
summary(poly_3_mean)
poly_3_mean$coefficients[1:4] <- c(-17128661108.085476, 2.56615577e+07, -1.28150909e+04,  2.13323868e+00)
poly_3_mean$rank <- c(4)
y_pred_lin_reg_3 <- predict(poly_3_mean, year_df, type="response")
df_extra$Y_pred_lin_reg_3 <- y_pred_lin_reg_3
# Old graph
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() + geom_point(size = 1) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Polynomial graph for GPU Memory and Year of Release (logaritmic scale)") +
stat_smooth(method = lm, formula = y ~ poly(x, 2, raw = F), se=F, col = 'darkseagreen', n=1000) +
stat_smooth(method = lm, formula = y ~ poly(x, 3, raw = F), se=F, col = 'darkgoldenrod1', n=1000) +
geom_smooth(method = lm, formula = y ~ poly(x,2), aes(y = log(Moore_Teoretic), colour = "Moore's law teoretic"), se=F, n =1000) +
geom_smooth(method = lm, formula = y ~ poly(x,2), aes(y = log(Moore_Fitted), colour = "Moore's law fitted"), se=F, n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("teoreticPolynomial graph for GPU Memory and Year of Release (original scale)") +
geom_line(aes(y = y_pred_lin_reg_2, colour = "2nd degree polynomial"), n=1000) +
geom_line(aes(y = y_pred_lin_reg_3, colour = "3rd degree polynomial"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000)
ggplot(df_extra, aes(x = Release_Year, y = log(Memory_Mean))) +  theme_classic() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
theme(legend.position='bottom', plot.title = element_text(hjust = 0.5)) +
xlab("Year") + ylab("GPU Memory") + labs(colour="") +
ggtitle("Exponential model vs Polynomial model") +
geom_line(aes(y = y_pred_lin_reg_2, colour = "2nd degree polynomial"), n=1000) +
geom_line(aes(y = y_pred_lin_reg_3, colour = "3rd degree polynomial"), n=1000) +
geom_line(aes(y = Moore_Teoretic, colour = "Moore's law teoretic"), n=1000) +
geom_line(aes(y = Moore_Fitted, colour = "Moore's law fitted"), n=1000) +
geom_line(aes(y = Memory_Mean, colour = "Mean"), n=1000) +
geom_line(aes(y = Memory_Median, colour = "Median"), n=1000)
# ----------------------------------------------------------------------------------------------------------------------
exp(predict(poly_3_mean, spec_RTX_3090, interval = "confidence", level = 0.95))
df_z_one = df %>% select('log.Release_Price')
df = df_knn
df['log.Boost_Clock'] <- log(df['Boost_Clock'])
df['log.Core_Speed'] <- log(df['Core_Speed'])
df['log.Max_Power'] <- log(df['Max_Power'])
df['log.Memory'] <- log(df['Memory'])
df['log.Memory_Bus'] <- log(df['Memory_Bus'])
df['log.Memory_Speed'] <- log(df['Memory_Speed'])
df['log.Release_Year'] <- log(df['Release_Year'])
df['log.Release_Price'] <- log(df['Release_Price'])
df['log.Shader'] <- log(df['Shader'])
df['log.TMUs'] <- log(df['TMUs'])
df_z_one = df %>% select('log.Release_Price')
View(df_z_one)
df_z_one = df %>% select('log.Memory')
df_z_one = df %>% select('Memory')
df_z_one = df %>% select('Memory')
zStat <- (mean(df_z_one$Memory) - 2000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
print(zStat)
pt(zStat, nrow(df_z_one) - 1)
zStat <- (mean(df_z_one$Memory) - 3000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
zStat <- (mean(df_z_one$Memory) - 3000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
print(zStat)
pt(zStat, nrow(df_z_one) - 1)
zStat <- (mean(df_z_one$Memory) - 2345) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
print(zStat)
pt(zStat, nrow(df_z_one) - 1)
zStat <- (mean(df_z_one$Memory) - 2500) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
pt(zStat, nrow(df_z_one) - 1)
print(zStat)
zStat <- (mean(df_z_one$Memory) - 2800) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
pt(zStat, nrow(df_z_one) - 1)
df_z_one = df %>% select('Memory')
zStat <- (mean(df_z_one$Memory) - 3000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
print(zStat)
pt(zStat, nrow(df_z_one) - 1)
pnorm(q=zStat, lower.tail=TRUE)
zStat <- (mean(df_z_one$Memory) - 3000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
pnorm(q=zStat, lower.tail=TRUE)
pt(zStat, nrow(df_z_one) - 1)
print(zStat)
zStat <- (mean(df_z_one$Memory) - 3000) / (sd(df_z_one$Memory) / sqrt(nrow(df_z_one)))
print(zStat)
pt(zStat, nrow(df_z_one) - 1)
pnorm(q=zStat, lower.tail=TRUE)
lmPrice = lm(log.Release_Price ~ log.Boost_Clock + log.Core_Speed + log.Max_Power + log.Memory + log.Memory_Bus + log.Memory_Speed + log.Shader + log.TMUs, df)
summary(lmPrice)
ftable(df[ ,'Release_Year'])
